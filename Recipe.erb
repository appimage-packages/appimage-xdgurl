#!/bin/bash

APP=<%= name %>

# Get helper functions
wget -q https://github.com/probonopd/AppImages/raw/master/functions.sh -O ./functions.sh
. ./functions.sh
rm -f functions.sh

#get deps
yum -y install perl-URI.noarch gnome-common rpm-build python27-tkinter tkinter gnome-icon-theme

function make_apprun_skel {
cat > ./AppRun <<\EOF
#!/bin/sh

# Base environment variables
export LD_LIBRARY_PATH=${APPDIR}/lib:${LD_LIBRARY_PATH}
export PATH=${APPDIR}/bin:${PATH}
export XDG_DATA_DIRS=${APPDIR}/share:${XDG_DATA_DIRS}
# GTK+/GIO/GdkPixbuf environment variables
# http://askubuntu.com/questions/251712/how-can-i-install-a-gsettings-schema-without-root-privileges
export GSETTINGS_SCHEMA_DIR=${APPDIR}/share/glib-2.0/schemas/:${GSETTINGS_SCHEMA_DIR}
export GDK_PIXBUF_MODULE_FILE=${APPDIR}/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
export GTK_PATH=${APPDIR}/lib/gtk-3.0
export GTK_DATA_PREFIX=${APPDIR}
export GTK_THEME=Adwaita

# Currently we change into the APPDIR directory, this only because of gdk-pixbuf
# and pango cache files which need to specify relative paths.
cd ${APPDIR}

if test -z ${APP_IMAGE_TEST}; then
    # Invoke the app with the arguments passed
    ${APPDIR}/bin/xdgurl $*
else
    # Run a shell in test mode
    bash;
fi

# Cleaning up the link to gstplugins
rm ${PLUGINS_SYMLINK}
EOF
chmod a+x ./AppRun
}

function patch_usr {
  find . -type f -exec sed -i -e 's|/usr|././|g' {} \;
}

function get_assistant {
  # Build AppImageKit
if [ ! -d AppImageKit ] ; then
  git clone  --depth 1 https://github.com/probonopd/AppImageKit.git /AppImageKit
fi

cd /AppImageKit/
git_pull_rebase_helper
./build.sh

chmod a+x ./AppImageAssistant*

cd ..
}

function make_appdir {
  /AppImageKit/AppImageAssistant.AppDir/package $APPDIR /out/$APP-$VERSION-$ARCH.AppImage
}

#deps

git clone https://github.com/xdgurl/xdgurl
cd xdgurl/pkg/fedora
sed  -i s/python3-tkinter/rh-python34-python-tkinter/g xdgurl.spec
sh build.sh
rpm -i /root/rpmbuild/RPMS/x86_64/xdgurl-1.0.0-1.el6.x86_64.rpm


VERSION=$(git describe | sed -e 's/-g.*$// ; s/^v//')

rm -rf /app || true # Clean up from previous runs
rm /out/* || true
mkdir -p /app/usr/bin /app/usr/lib /out

APPDIR=/app/
cd $APPDIR

cp /usr/share/icons/gnome/scalable/emblems/emblem-web.svg .

# CentOS 6 places stuff in lib64 where AppRun doesn't find it
ln -s ./lib ./usr/lib64
ln -s ./lib ./usr/lib32

FILES=$(rpm -qla $APP)
for FILE in $FILES ; do
  if [ -f $FILE ] ; then
    echo $FILE
    cp --parents -rfL $FILE ./
  fi
done

# Copy in the indirect dependencies
FILES=$(find . -type f -executable)
DEPS=""
for FILE in $FILES ; do
  ldd "${FILE}" | grep "=>" | awk '{print $3}' | xargs -I '{}' echo '{}' > DEPSFILE
done
DEPS=$(cat DEPSFILE  |sort | uniq)
for FILE in $DEPS ; do
  if [ -f $FILE ] ; then
    echo $FILE
    cp --parents -rfL $FILE ./
  fi
done
rm -f DEPSFILE

# We want everything in usr/ inside the AppDir
mv lib*/* usr/lib/ || true
rm -rf ./lib* || true

# Copy desktop file in place
DESKTOP=$(find . -name "*$APP.desktop" | head -n 1)
cp $DESKTOP .

echo Icon=emblem-web.svg >> $APP.desktop

VERSION=$(rpm -qa | grep ^$APP- | cut -d - -f 2)
echo $VERSION

if [ "$VERSION" == "" ] ; then
  echo "Cannot determine version from rpm"
  exit 1
fi

which xdgurl

make_apprun_skel
echo "./usr/bin/xdgurl $@" >> AppRun
get_assistant
make_appdir "${APP}" "${VERSION}"


